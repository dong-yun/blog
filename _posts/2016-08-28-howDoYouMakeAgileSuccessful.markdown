---

layout: post 
title: "So, How Do You Make Agile Successful? (작업중)" 
date: 2016-08-28 10:25:00 +0900
categories: agile
tags:
- agile
- scrum
- 토요타

---

<hr/>

얼마전 부터 코드리뷰를 시작하게 되었다. 또 다른 부서에서는 아침마다 간이 화이트보드에 포스트잇을 붙여가면서 scrum 미팅을 하고 있다. 
그리고 과제를 진행하면서 sprint 니 phase 하는 용어를 쓰고 있다.

모두 Agile 하게 일하고 싶은 것이다.

하지만, 여전히 관심이 없는 사람이 많으며 이들을 도입하기 전과 다른 점을 찾기 힘든 것도 사실로 보인다.

무엇이 문제일까? 이와 관련된 듯한 기사가 있어 포스팅 한다.

<hr/>

-	원문 : [So, How Dow You make Agile Successful?](https://www.infoq.com/articles/how-make-agile-successful?utm_source=infoq&utm_medium=popular_widget&utm_campaign=popular_content_list&utm_content=homepage)

```
Key takeaways

 -   Agile 의 본질
 -   Scrum 의 함정
 -   Agile 은 product, delivery 레벨에 각기 다른 skill 과 mindset 을 필요로 함
 -   CICD 를 사용해 Scrum 의 함정에서 비켜가자
 -   thinking skill 시스템 개발
```

[Why Agile Didn't Work](https://www.infoq.com/articles/agile-didnt-work) 를 쓴 이후 많은 논의가 있었다. 
Agile을 통해 좋은 경험을 한 사람도 있었지만, 아주 나쁜 기억을 가지게된 사람도 있다. 
하지만 양쪽 모두 일반적으로 하나의 결론을 내고 있다.`process 에 대한 얘기가 아니고 사람에 대한 얘기` 라는 것이다.
소프트웨어는 더이상 엘리트 산업이 아니다. 일반적으로 한 팀에서 뛰어난 사람이 몇명 있고 그외에는 평범한 수준의 엔지니어와 관리자가 있다. 
Agile 팀은 `먼저 협동하라. 그러면 Agile 의 마법을 보여줄 것` 이라고 얘기한다. 
바로 이 점이 Agile 에서 마음에 안드는 부분이다. Agile 이 효과를 내는 것은 `Agile 의 이론들이 뛰어나기 때문` 이고, 
효과를 내지 않는 경우는 `당신이 그것을 방해하고 잘못 실행하기 때문` 이라는 것이다. 
이것은 책임회피에 불과하다. 이보다 좀 더 건설적인 대응이 필요하다.

먼저 Agile 의 본질을 집어보자.

The essence of Agile
-------------------

scrum , lean, lean startup 모두 빠르게 delivery 하고 빠르게 feedback 받는 공통 점이 있다.
왜냐하면, feedback 으로부터 배울 필요가 있기 때문이다.
뭔가를 시작할 때, 그리 많이 알고 있지 않기 때문에 `요구사항을 명확하게 하고 risk 를 발견하기 위해 빠른 feedback 이 필요`하다.
개발단계의 bug 에 대한 신속한 feedback 은  `product 의 질을 향상`시킨다.

몇몇 관리자는 `'당신에게 일하라고 돈을 주는 것이지 배우라고 주는 것이 아니다'` 라고 한다.
이런 관리자들에게 조금 거칠게 얘기 하자면,
소프트웨어 엔지니어링은 지식 산업이다. 
공장의 조립 생산라인처럼 소프트웨어 엔지니어를 `아무렇게나 그룹으로 만들어놓고 높은 품질의 소프트웨어를 요구할 수 없다`.

Agile 은 사용자, 고객에게 배울 수 있는 기회 (혹은 도전할 수 있는 기회) 를 제공한다.
Agile 사용 통계에서 보자면 오직 20% 만이 정기적으로 사용되고 64%는 거의 사용되지 않거나 아예 사용되지 않는다.
Agile 과 함께, 이 20% 를 식별하고 64% 는 시간을 낭비하지 않기를 희망한다.
Agile 은 그들의 변덕스러운 mind 를 바꿀수 있다는 의미가 아니다. 
오히려 그들이 `작업의 양을 최대화 하기 위해  개발 과정에 참여하는` 것과 같은 시도를 하는 것에 대해 주의 깊게 생각해야 할 필요가 있다.

![alt breakdown](https://cdn.infoq.com/statics_s1_20160823-0357/resource/articles/how-make-agile-successful/en/resources/21.jpg)

그러나 `배우는게 쉽다는 것은 끝났다`. 
우리가 이해하지 못하는 것들에 대해 먼저 `겸손하고 오픈 마인드`가 되어야 한다.
그리고 나서야 실수나 반대의견을 집어내는 기술이 필요하다. 
또한 시스템적으로 생각할 수 있는 기술, 근본적인 원인까지 파내는 것 그리고 솔루션을 도출해 내는 것 또한 필요하다.
마지막으로, 솔루션을 시도해서 뭔가 바꿔볼 수 있는 용기와 인내가 필요하다.

관리자는 이런 방식에 많은 부담을 가지고 있다. 
왜냐면 Agile 은 빠른 feedback 을 하지기 때문에, 더 많은 issue를 더 빠르게 보게 된고, 이러한 부분은 관리적인 부분에 좀 더 관련이 있다.
관리적인 부분을 Scrum 마스터에게 위임한다는 것은 생각하지도 말아야 한다.
실제 회사에서는, `self-organizing(자체 조직화)` 팀들을 세우기 힘들기도 하다.
그리고 변화를 위해 `회사의 관료적인 부분을 통과 하기 위해 헌신하는 Scrum 마스터`를 기대하는 것도 비현실적이다.
Agile 전환이 단지 `관리자의 이슈에 대한 행위를 관찰하는 방법`에 성공적이라고 생각해보자.
만약 관리자의 행위가 미팅을 늘리고 컨트롤을 늘리는 것이라면, Agile 이 성공할 가능성은 낮아질 것이다.

 * 토요타에서 정의한 리더쉽에 대한 얘기들
 
 1. 행동하라. 그리고 조직의 일에 대해 마음을 열고 주시하라.
 2. 사람들이 정말 무슨 말을하는지 들어라.
 3. 시스템적 사고 (Systems thinking)
 4. 문제들을 명확히 정의하고 근본 원인을 밝혀라.
 5. 창조적 식별이 진짜 근본 원인에 대한 수단이다. 
 6. 계획하라. (Planning)
 7. 계획은 명확한 책임이 있는 행동을 포함한다.
 8. 미래의 기회를 확인하는 것에 대해 시간을 갖고 심사숙고 하라.
 9. 개개인의 실제 강점과 약점을 이해하라.
 10. 동기를 부여하고 조직 전체 사람들(권한이 없는)를 공통의 목표에 대해 영향을 미쳐라.
 11. 위의 모든 것을 가르칠 수 있도록 하라.
 
이 리더쉽 기술을은 issue 를 해결하는 것에 대해 최적화 되어 있다. 1-7 은 문제를 올바르게 풀기 위한 접근방법에 대한 것이다.
 8 은 문제가 반복되는 것을 방지하고 개선하기 위한 것이다. 9,10,11 은 인력 관리에 대한 것으로, 궁극적으로 올바른 문제 해결을 가르치는 것이 목표이다.
 

Scrum traps
-----------

Self-organizing team
--------------------

User story
----------

Meetings
--------

Velocity
--------

Micromanagement
---------------

Invest on skills, not on processes
----------------------------------
